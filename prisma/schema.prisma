// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  admin
  accountant
  employee
  EMPLOYEE
  ADMIN
}

enum PaymentMethod {
  CASH
  BANK
}

enum TransactionType {
  IMPREST
  EXPENSE
}

enum TransactionStatus {
  PENDING
  APPROVED
  REJECTED
}

enum OrderStatus {
  ACTIVE
  COMPLETED
  CANCELLED
}

enum AuditAction {
  CREATE
  UPDATE
  DELETE
}

model Permission {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  code        String @unique
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  userPermissions UserPermission[]

  @@map("permissions")
}

model User {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  email          String   @unique
  password       String   // Store only the generated plain text password
  role           UserRole?
  printName      String?
  senderId       String?
  position       String?
  phone          String?
  whatsapp       String?
  address        String?
  panNumber      String?  // optional
  aadhaarNumber  String?  // optional
  isFirstLogin   Boolean  @default(true) @map("is_first_login") // Track if user needs to change password
  createdAt      DateTime? @default(now())
  updatedAt      DateTime? @updatedAt @map("updated_at")

  // Relations
  permissions         UserPermission[]
  sentTransactions    Transaction[] @relation("SenderTransaction")
  createdTransactions Transaction[] @relation("CreatedByTransaction")
  // createdOrders       Order[]
  auditLogs           AuditLog[]
  profile             UserProfile?   // Relation to UserProfile

  @@map("users")
}

model UserPermission {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  userId       String @map("user_id") @db.ObjectId
  permissionId String @map("permission_id") @db.ObjectId
  createdAt    DateTime @default(now()) @map("created_at")

  // Relations
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([userId, permissionId])
  @@map("user_permissions")
}

model BankAccount {
  id            String  @id @default(auto()) @map("_id") @db.ObjectId
  bankName      String  @map("bank_name")
  accountNumber String  @map("account_number")
  ifsccode   String  @map("ifsc_code")
  branchName    String  @map("branch_name")
  isDefault     Boolean @default(false) @map("is_default")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relations
  transactions Transaction[]

  @@map("bank_accounts")
}

model SenderIdSeries {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  prefix      String  @unique
  description String?
  isDefault   Boolean @default(false) @map("is_default")
  lastNumber  Int     @default(0) @map("last_number")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("sender_id_series")
}

model OrderSeries {
  id            String  @id @default(auto()) @map("_id") @db.ObjectId
  prefix        String  @unique
  suffix        String? @map("suffix")
  description   String?
  isDefault     Boolean @default(false) @map("is_default")
  startNumber   Int?     @default(1) @map("start_number")
  lastNumber    Int     @default(0) @map("last_number")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relations
  orders        Order[]

  @@map("order_series")
}

model Order {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  orderNumber   String      @unique @map("order_number")
  description   String?
  amount        Float       // Changed from Decimal to Float for MongoDB
  status        OrderStatus @default(ACTIVE)
  orderSeriesId String      @map("order_series_id") @db.ObjectId
  // createdBy   String      @map("created_by") @db.ObjectId
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")

  // Relations
  orderSeries   OrderSeries   @relation(fields: [orderSeriesId], references: [id])
  // creator      User          @relation( references: [id])
  transactions  Transaction[]
  subOrders     SubOrder[]

  @@map("orders")
}

model SubOrder {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  description   String?
  orderId       String      @map("order_id") @db.ObjectId
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")

  // Relations
  order         Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)
  transactions  Transaction[]

  @@map("sub_orders")
}

model ExpenseCategory {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String  @unique
  description String?
  isActive    Boolean? @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  transactions Transaction[]

  @@map("expense_categories")
}

model Transaction {
  id                String            @id @map("_id")
  amount            Float             // Changed from Decimal to Float for MongoDB
  type              TransactionType
  senderId          String            @map("sender_id") @db.ObjectId
  receiverId        String            @map("receiver_id") // Can be ObjectId or special string like "EXPENSE"
  remark            String
  paymentMethod     PaymentMethod     @map("payment_method")
  bankAccountId     String?           @map("bank_account_id") @db.ObjectId
  orderId           String?           @map("order_id") @db.ObjectId
  subOrderId        String?           @map("sub_order_id") @db.ObjectId
  expenseCategoryId String?           @map("expense_category_id") @db.ObjectId
  hasInvoice        Boolean?          @default(false) @map("has_invoice")
  invoiceUrl        String?           @map("invoice_url")
  entryDate         DateTime          @map("entry_date")
  transactionDate   DateTime          @map("transaction_date")
  status            TransactionStatus @default(PENDING)
  createdBy         String            @map("created_by") @db.ObjectId
  createdAt         DateTime          @default(now()) @map("created_at")
  updatedAt         DateTime          @updatedAt @map("updated_at")

  // Relations - Note: receiver relation is optional because receiverId can be "EXPENSE" or other special values
  sender          User             @relation("SenderTransaction", fields: [senderId], references: [id])
  creator         User             @relation("CreatedByTransaction", fields: [createdBy], references: [id])
  bankAccount     BankAccount?     @relation(fields: [bankAccountId], references: [id])
  order           Order?           @relation(fields: [orderId], references: [id])
  subOrder        SubOrder?        @relation(fields: [subOrderId], references: [id])
  expenseCategory ExpenseCategory? @relation(fields: [expenseCategoryId], references: [id])

  @@map("transactions")
}

model AuditLog {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  userId     String      @map("user_id") @db.ObjectId
  action     AuditAction
  entityType String      @map("entity_type")
  entityId   String      @map("entity_id")
  details    Json
  timestamp  DateTime    @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}

model UserProfile {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  userId        String   @unique @map("user_id") @db.ObjectId
  position      String   
  phone         String   
  whatsapp      String   
  address       String
  panNumber     String?  @map("pan_number")
  aadhaarNumber String?  @map("aadhaar_number")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_profiles")
}
